import 'package:assign_erp/core/util/str_util.dart';
import 'package:hive/hive.dart';

// Use the following command to generate the code with build_runner:
// CMD: dart run build_runner build
part 'cache_data_model.g.dart'; // This will be auto-generated by build_runner

@HiveType(typeId: 0)
class CacheData extends HiveObject {
  /// Cache key identifier.
  /// [id] is a unique identifier for the cache entry.
  @HiveField(0)
  late String id;

  /// [data] expect `Map<String, dynamic>`
  @HiveField(1)
  late Map<String, dynamic> data;

  /// The ID that scopes the cache data (e.g., workspace or tenant ID).
  /// [scopeId] is used to differentiate cache entries for different contexts (e.g., different workspaces).
  /// to ensure data is only cached for a specific context/scope.
  @HiveField(2)
  late String scopeId;

  CacheData({required this.id, required this.scopeId, required this.data});

  /// Creates a [CacheData] instance from a [Map<String, dynamic>].
  /// [data] expect `Map<String, dynamic>`
  /// [id] = same as `cache key` expect `String`
  /// [scopeId] = same as `scopeId` expect `String`
  factory CacheData.fromMap(
    Map<String, dynamic> data, {
    String? id,
    required String scopeId,
  }) => CacheData(id: id ?? data['id'], scopeId: scopeId, data: data);

  /// Creates a [CacheData] instance from a cache entry with the given [id] and [scopeId].
  /// [data] expect `Map<String, dynamic>`
  /// [id] = same as `cache key` expect `String`
  /// [scopeId] = same as `scopeId` expect `String`
  factory CacheData.fromCache(
    Map<String, dynamic> data, {
    required String id,
    required String scopeId,
  }) => CacheData(id: id, scopeId: scopeId, data: data['data']);

  bool get isEmpty =>
      id.isNullOrEmpty ||
      scopeId.isNullOrEmpty ||
      data.isEmpty ||
      data.entries.isEmpty;
}
